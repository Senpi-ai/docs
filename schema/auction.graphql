"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity
is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int

  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

enum Aggregation_interval {
  hour
  day
}

type AuctionCleared {
  """txhash+-+logIndex"""
  id: ID!
  blockInfo: BlockInfo!
  auctionId: BigInt!
  soldAuctioningTokens: BigInt!
  soldBiddingTokens: BigInt!
  clearingPriceOrder: Bytes!
}

input AuctionCleared_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockInfo: String
  blockInfo_not: String
  blockInfo_gt: String
  blockInfo_lt: String
  blockInfo_gte: String
  blockInfo_lte: String
  blockInfo_in: [String!]
  blockInfo_not_in: [String!]
  blockInfo_contains: String
  blockInfo_contains_nocase: String
  blockInfo_not_contains: String
  blockInfo_not_contains_nocase: String
  blockInfo_starts_with: String
  blockInfo_starts_with_nocase: String
  blockInfo_not_starts_with: String
  blockInfo_not_starts_with_nocase: String
  blockInfo_ends_with: String
  blockInfo_ends_with_nocase: String
  blockInfo_not_ends_with: String
  blockInfo_not_ends_with_nocase: String
  blockInfo_: BlockInfo_filter
  auctionId: BigInt
  auctionId_not: BigInt
  auctionId_gt: BigInt
  auctionId_lt: BigInt
  auctionId_gte: BigInt
  auctionId_lte: BigInt
  auctionId_in: [BigInt!]
  auctionId_not_in: [BigInt!]
  soldAuctioningTokens: BigInt
  soldAuctioningTokens_not: BigInt
  soldAuctioningTokens_gt: BigInt
  soldAuctioningTokens_lt: BigInt
  soldAuctioningTokens_gte: BigInt
  soldAuctioningTokens_lte: BigInt
  soldAuctioningTokens_in: [BigInt!]
  soldAuctioningTokens_not_in: [BigInt!]
  soldBiddingTokens: BigInt
  soldBiddingTokens_not: BigInt
  soldBiddingTokens_gt: BigInt
  soldBiddingTokens_lt: BigInt
  soldBiddingTokens_gte: BigInt
  soldBiddingTokens_lte: BigInt
  soldBiddingTokens_in: [BigInt!]
  soldBiddingTokens_not_in: [BigInt!]
  clearingPriceOrder: Bytes
  clearingPriceOrder_not: Bytes
  clearingPriceOrder_gt: Bytes
  clearingPriceOrder_lt: Bytes
  clearingPriceOrder_gte: Bytes
  clearingPriceOrder_lte: Bytes
  clearingPriceOrder_in: [Bytes!]
  clearingPriceOrder_not_in: [Bytes!]
  clearingPriceOrder_contains: Bytes
  clearingPriceOrder_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AuctionCleared_filter]
  or: [AuctionCleared_filter]
}

enum AuctionCleared_orderBy {
  id
  blockInfo
  blockInfo__id
  blockInfo__hash
  blockInfo__blockNumber
  blockInfo__timestamp
  auctionId
  soldAuctioningTokens
  soldBiddingTokens
  clearingPriceOrder
}

type AuctionDetail {
  id: ID!
  auctionId: BigInt!
  exactOrder: Order!

  """order with highest price"""
  highestPriceBidOrder: Order

  """order with lowest price"""
  lowestPriceBidOrder: Order

  """orders which are not cancelled or claimed"""
  activeOrders(skip: Int = 0, first: Int = 100, orderBy: Order_orderBy, orderDirection: OrderDirection, where: Order_filter): [Order!]
  auctioningToken: Token!
  biddingToken: Token!
  auctionEndDate: BigInt!
  orderCancellationEndDate: BigInt!
  startingTimeStamp: BigInt!
  minimumBiddingAmountPerOrder: BigInt!
  minFundingThreshold: BigInt!
  minBuyAmount: BigInt!
  auctionSupply: BigInt!
  allowListManager: Bytes!
  allowListSigner: Bytes!
  currentVolume: BigDecimal!
  volumeClearingPriceOrder: BigInt!
  currentClearingOrderSellAmount: BigInt!
  currentClearingOrderBuyAmount: BigInt!
  currentClearingOrderUserId: BigDecimal!

  """price of auctioningToken in terms of bidding token"""
  currentClearingPrice: BigDecimal!

  """Total sell amount of all orders in the auction"""
  currentBiddingAmount: BigInt!

  """Total subjectTokens bid for in the auction by active orders"""
  currentSubjectTokenBidAmount: BigInt!
  isAtomicClosureAllowed: Boolean!
  isPrivateAuction: Boolean!
  interestScore: BigDecimal!

  """number of unique users who have placed orders in the auction"""
  uniqueBidders: BigInt!

  """set true when AuctionCleared is emitted"""
  isCleared: Boolean!

  """totalOrders involved in the auction cancelled or claimed or active"""
  totalOrders: BigInt!

  """number of active bids"""
  activeOrderCount: BigInt!

  """transaction hash of the auction creation"""
  txHash: Bytes!

  """block information of auction creation"""
  blockInfo: BlockInfo!

  """minimum price in moxie to purchase one subject token"""
  minimumPriceInMoxie: BigDecimal!
}

input AuctionDetail_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  auctionId: BigInt
  auctionId_not: BigInt
  auctionId_gt: BigInt
  auctionId_lt: BigInt
  auctionId_gte: BigInt
  auctionId_lte: BigInt
  auctionId_in: [BigInt!]
  auctionId_not_in: [BigInt!]
  exactOrder: String
  exactOrder_not: String
  exactOrder_gt: String
  exactOrder_lt: String
  exactOrder_gte: String
  exactOrder_lte: String
  exactOrder_in: [String!]
  exactOrder_not_in: [String!]
  exactOrder_contains: String
  exactOrder_contains_nocase: String
  exactOrder_not_contains: String
  exactOrder_not_contains_nocase: String
  exactOrder_starts_with: String
  exactOrder_starts_with_nocase: String
  exactOrder_not_starts_with: String
  exactOrder_not_starts_with_nocase: String
  exactOrder_ends_with: String
  exactOrder_ends_with_nocase: String
  exactOrder_not_ends_with: String
  exactOrder_not_ends_with_nocase: String
  exactOrder_: Order_filter
  highestPriceBidOrder: String
  highestPriceBidOrder_not: String
  highestPriceBidOrder_gt: String
  highestPriceBidOrder_lt: String
  highestPriceBidOrder_gte: String
  highestPriceBidOrder_lte: String
  highestPriceBidOrder_in: [String!]
  highestPriceBidOrder_not_in: [String!]
  highestPriceBidOrder_contains: String
  highestPriceBidOrder_contains_nocase: String
  highestPriceBidOrder_not_contains: String
  highestPriceBidOrder_not_contains_nocase: String
  highestPriceBidOrder_starts_with: String
  highestPriceBidOrder_starts_with_nocase: String
  highestPriceBidOrder_not_starts_with: String
  highestPriceBidOrder_not_starts_with_nocase: String
  highestPriceBidOrder_ends_with: String
  highestPriceBidOrder_ends_with_nocase: String
  highestPriceBidOrder_not_ends_with: String
  highestPriceBidOrder_not_ends_with_nocase: String
  highestPriceBidOrder_: Order_filter
  lowestPriceBidOrder: String
  lowestPriceBidOrder_not: String
  lowestPriceBidOrder_gt: String
  lowestPriceBidOrder_lt: String
  lowestPriceBidOrder_gte: String
  lowestPriceBidOrder_lte: String
  lowestPriceBidOrder_in: [String!]
  lowestPriceBidOrder_not_in: [String!]
  lowestPriceBidOrder_contains: String
  lowestPriceBidOrder_contains_nocase: String
  lowestPriceBidOrder_not_contains: String
  lowestPriceBidOrder_not_contains_nocase: String
  lowestPriceBidOrder_starts_with: String
  lowestPriceBidOrder_starts_with_nocase: String
  lowestPriceBidOrder_not_starts_with: String
  lowestPriceBidOrder_not_starts_with_nocase: String
  lowestPriceBidOrder_ends_with: String
  lowestPriceBidOrder_ends_with_nocase: String
  lowestPriceBidOrder_not_ends_with: String
  lowestPriceBidOrder_not_ends_with_nocase: String
  lowestPriceBidOrder_: Order_filter
  activeOrders: [String!]
  activeOrders_not: [String!]
  activeOrders_contains: [String!]
  activeOrders_contains_nocase: [String!]
  activeOrders_not_contains: [String!]
  activeOrders_not_contains_nocase: [String!]
  activeOrders_: Order_filter
  auctioningToken: String
  auctioningToken_not: String
  auctioningToken_gt: String
  auctioningToken_lt: String
  auctioningToken_gte: String
  auctioningToken_lte: String
  auctioningToken_in: [String!]
  auctioningToken_not_in: [String!]
  auctioningToken_contains: String
  auctioningToken_contains_nocase: String
  auctioningToken_not_contains: String
  auctioningToken_not_contains_nocase: String
  auctioningToken_starts_with: String
  auctioningToken_starts_with_nocase: String
  auctioningToken_not_starts_with: String
  auctioningToken_not_starts_with_nocase: String
  auctioningToken_ends_with: String
  auctioningToken_ends_with_nocase: String
  auctioningToken_not_ends_with: String
  auctioningToken_not_ends_with_nocase: String
  auctioningToken_: Token_filter
  biddingToken: String
  biddingToken_not: String
  biddingToken_gt: String
  biddingToken_lt: String
  biddingToken_gte: String
  biddingToken_lte: String
  biddingToken_in: [String!]
  biddingToken_not_in: [String!]
  biddingToken_contains: String
  biddingToken_contains_nocase: String
  biddingToken_not_contains: String
  biddingToken_not_contains_nocase: String
  biddingToken_starts_with: String
  biddingToken_starts_with_nocase: String
  biddingToken_not_starts_with: String
  biddingToken_not_starts_with_nocase: String
  biddingToken_ends_with: String
  biddingToken_ends_with_nocase: String
  biddingToken_not_ends_with: String
  biddingToken_not_ends_with_nocase: String
  biddingToken_: Token_filter
  auctionEndDate: BigInt
  auctionEndDate_not: BigInt
  auctionEndDate_gt: BigInt
  auctionEndDate_lt: BigInt
  auctionEndDate_gte: BigInt
  auctionEndDate_lte: BigInt
  auctionEndDate_in: [BigInt!]
  auctionEndDate_not_in: [BigInt!]
  orderCancellationEndDate: BigInt
  orderCancellationEndDate_not: BigInt
  orderCancellationEndDate_gt: BigInt
  orderCancellationEndDate_lt: BigInt
  orderCancellationEndDate_gte: BigInt
  orderCancellationEndDate_lte: BigInt
  orderCancellationEndDate_in: [BigInt!]
  orderCancellationEndDate_not_in: [BigInt!]
  startingTimeStamp: BigInt
  startingTimeStamp_not: BigInt
  startingTimeStamp_gt: BigInt
  startingTimeStamp_lt: BigInt
  startingTimeStamp_gte: BigInt
  startingTimeStamp_lte: BigInt
  startingTimeStamp_in: [BigInt!]
  startingTimeStamp_not_in: [BigInt!]
  minimumBiddingAmountPerOrder: BigInt
  minimumBiddingAmountPerOrder_not: BigInt
  minimumBiddingAmountPerOrder_gt: BigInt
  minimumBiddingAmountPerOrder_lt: BigInt
  minimumBiddingAmountPerOrder_gte: BigInt
  minimumBiddingAmountPerOrder_lte: BigInt
  minimumBiddingAmountPerOrder_in: [BigInt!]
  minimumBiddingAmountPerOrder_not_in: [BigInt!]
  minFundingThreshold: BigInt
  minFundingThreshold_not: BigInt
  minFundingThreshold_gt: BigInt
  minFundingThreshold_lt: BigInt
  minFundingThreshold_gte: BigInt
  minFundingThreshold_lte: BigInt
  minFundingThreshold_in: [BigInt!]
  minFundingThreshold_not_in: [BigInt!]
  minBuyAmount: BigInt
  minBuyAmount_not: BigInt
  minBuyAmount_gt: BigInt
  minBuyAmount_lt: BigInt
  minBuyAmount_gte: BigInt
  minBuyAmount_lte: BigInt
  minBuyAmount_in: [BigInt!]
  minBuyAmount_not_in: [BigInt!]
  auctionSupply: BigInt
  auctionSupply_not: BigInt
  auctionSupply_gt: BigInt
  auctionSupply_lt: BigInt
  auctionSupply_gte: BigInt
  auctionSupply_lte: BigInt
  auctionSupply_in: [BigInt!]
  auctionSupply_not_in: [BigInt!]
  allowListManager: Bytes
  allowListManager_not: Bytes
  allowListManager_gt: Bytes
  allowListManager_lt: Bytes
  allowListManager_gte: Bytes
  allowListManager_lte: Bytes
  allowListManager_in: [Bytes!]
  allowListManager_not_in: [Bytes!]
  allowListManager_contains: Bytes
  allowListManager_not_contains: Bytes
  allowListSigner: Bytes
  allowListSigner_not: Bytes
  allowListSigner_gt: Bytes
  allowListSigner_lt: Bytes
  allowListSigner_gte: Bytes
  allowListSigner_lte: Bytes
  allowListSigner_in: [Bytes!]
  allowListSigner_not_in: [Bytes!]
  allowListSigner_contains: Bytes
  allowListSigner_not_contains: Bytes
  currentVolume: BigDecimal
  currentVolume_not: BigDecimal
  currentVolume_gt: BigDecimal
  currentVolume_lt: BigDecimal
  currentVolume_gte: BigDecimal
  currentVolume_lte: BigDecimal
  currentVolume_in: [BigDecimal!]
  currentVolume_not_in: [BigDecimal!]
  volumeClearingPriceOrder: BigInt
  volumeClearingPriceOrder_not: BigInt
  volumeClearingPriceOrder_gt: BigInt
  volumeClearingPriceOrder_lt: BigInt
  volumeClearingPriceOrder_gte: BigInt
  volumeClearingPriceOrder_lte: BigInt
  volumeClearingPriceOrder_in: [BigInt!]
  volumeClearingPriceOrder_not_in: [BigInt!]
  currentClearingOrderSellAmount: BigInt
  currentClearingOrderSellAmount_not: BigInt
  currentClearingOrderSellAmount_gt: BigInt
  currentClearingOrderSellAmount_lt: BigInt
  currentClearingOrderSellAmount_gte: BigInt
  currentClearingOrderSellAmount_lte: BigInt
  currentClearingOrderSellAmount_in: [BigInt!]
  currentClearingOrderSellAmount_not_in: [BigInt!]
  currentClearingOrderBuyAmount: BigInt
  currentClearingOrderBuyAmount_not: BigInt
  currentClearingOrderBuyAmount_gt: BigInt
  currentClearingOrderBuyAmount_lt: BigInt
  currentClearingOrderBuyAmount_gte: BigInt
  currentClearingOrderBuyAmount_lte: BigInt
  currentClearingOrderBuyAmount_in: [BigInt!]
  currentClearingOrderBuyAmount_not_in: [BigInt!]
  currentClearingOrderUserId: BigDecimal
  currentClearingOrderUserId_not: BigDecimal
  currentClearingOrderUserId_gt: BigDecimal
  currentClearingOrderUserId_lt: BigDecimal
  currentClearingOrderUserId_gte: BigDecimal
  currentClearingOrderUserId_lte: BigDecimal
  currentClearingOrderUserId_in: [BigDecimal!]
  currentClearingOrderUserId_not_in: [BigDecimal!]
  currentClearingPrice: BigDecimal
  currentClearingPrice_not: BigDecimal
  currentClearingPrice_gt: BigDecimal
  currentClearingPrice_lt: BigDecimal
  currentClearingPrice_gte: BigDecimal
  currentClearingPrice_lte: BigDecimal
  currentClearingPrice_in: [BigDecimal!]
  currentClearingPrice_not_in: [BigDecimal!]
  currentBiddingAmount: BigInt
  currentBiddingAmount_not: BigInt
  currentBiddingAmount_gt: BigInt
  currentBiddingAmount_lt: BigInt
  currentBiddingAmount_gte: BigInt
  currentBiddingAmount_lte: BigInt
  currentBiddingAmount_in: [BigInt!]
  currentBiddingAmount_not_in: [BigInt!]
  currentSubjectTokenBidAmount: BigInt
  currentSubjectTokenBidAmount_not: BigInt
  currentSubjectTokenBidAmount_gt: BigInt
  currentSubjectTokenBidAmount_lt: BigInt
  currentSubjectTokenBidAmount_gte: BigInt
  currentSubjectTokenBidAmount_lte: BigInt
  currentSubjectTokenBidAmount_in: [BigInt!]
  currentSubjectTokenBidAmount_not_in: [BigInt!]
  isAtomicClosureAllowed: Boolean
  isAtomicClosureAllowed_not: Boolean
  isAtomicClosureAllowed_in: [Boolean!]
  isAtomicClosureAllowed_not_in: [Boolean!]
  isPrivateAuction: Boolean
  isPrivateAuction_not: Boolean
  isPrivateAuction_in: [Boolean!]
  isPrivateAuction_not_in: [Boolean!]
  interestScore: BigDecimal
  interestScore_not: BigDecimal
  interestScore_gt: BigDecimal
  interestScore_lt: BigDecimal
  interestScore_gte: BigDecimal
  interestScore_lte: BigDecimal
  interestScore_in: [BigDecimal!]
  interestScore_not_in: [BigDecimal!]
  uniqueBidders: BigInt
  uniqueBidders_not: BigInt
  uniqueBidders_gt: BigInt
  uniqueBidders_lt: BigInt
  uniqueBidders_gte: BigInt
  uniqueBidders_lte: BigInt
  uniqueBidders_in: [BigInt!]
  uniqueBidders_not_in: [BigInt!]
  isCleared: Boolean
  isCleared_not: Boolean
  isCleared_in: [Boolean!]
  isCleared_not_in: [Boolean!]
  totalOrders: BigInt
  totalOrders_not: BigInt
  totalOrders_gt: BigInt
  totalOrders_lt: BigInt
  totalOrders_gte: BigInt
  totalOrders_lte: BigInt
  totalOrders_in: [BigInt!]
  totalOrders_not_in: [BigInt!]
  activeOrderCount: BigInt
  activeOrderCount_not: BigInt
  activeOrderCount_gt: BigInt
  activeOrderCount_lt: BigInt
  activeOrderCount_gte: BigInt
  activeOrderCount_lte: BigInt
  activeOrderCount_in: [BigInt!]
  activeOrderCount_not_in: [BigInt!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockInfo: String
  blockInfo_not: String
  blockInfo_gt: String
  blockInfo_lt: String
  blockInfo_gte: String
  blockInfo_lte: String
  blockInfo_in: [String!]
  blockInfo_not_in: [String!]
  blockInfo_contains: String
  blockInfo_contains_nocase: String
  blockInfo_not_contains: String
  blockInfo_not_contains_nocase: String
  blockInfo_starts_with: String
  blockInfo_starts_with_nocase: String
  blockInfo_not_starts_with: String
  blockInfo_not_starts_with_nocase: String
  blockInfo_ends_with: String
  blockInfo_ends_with_nocase: String
  blockInfo_not_ends_with: String
  blockInfo_not_ends_with_nocase: String
  blockInfo_: BlockInfo_filter
  minimumPriceInMoxie: BigDecimal
  minimumPriceInMoxie_not: BigDecimal
  minimumPriceInMoxie_gt: BigDecimal
  minimumPriceInMoxie_lt: BigDecimal
  minimumPriceInMoxie_gte: BigDecimal
  minimumPriceInMoxie_lte: BigDecimal
  minimumPriceInMoxie_in: [BigDecimal!]
  minimumPriceInMoxie_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AuctionDetail_filter]
  or: [AuctionDetail_filter]
}

enum AuctionDetail_orderBy {
  id
  auctionId
  exactOrder
  exactOrder__id
  exactOrder__sellAmount
  exactOrder__buyAmount
  exactOrder__price
  exactOrder__volume
  exactOrder__timestamp
  exactOrder__auctionId
  exactOrder__userWalletAddress
  exactOrder__status
  exactOrder__txHash
  exactOrder__isExactOrder
  exactOrder__encodedOrderId
  exactOrder__lastUpdatedIndex
  exactOrder__finalizedBuyAmount
  exactOrder__finalizedSellAmount
  exactOrder__refundAmount
  exactOrder__finalTxHash
  highestPriceBidOrder
  highestPriceBidOrder__id
  highestPriceBidOrder__sellAmount
  highestPriceBidOrder__buyAmount
  highestPriceBidOrder__price
  highestPriceBidOrder__volume
  highestPriceBidOrder__timestamp
  highestPriceBidOrder__auctionId
  highestPriceBidOrder__userWalletAddress
  highestPriceBidOrder__status
  highestPriceBidOrder__txHash
  highestPriceBidOrder__isExactOrder
  highestPriceBidOrder__encodedOrderId
  highestPriceBidOrder__lastUpdatedIndex
  highestPriceBidOrder__finalizedBuyAmount
  highestPriceBidOrder__finalizedSellAmount
  highestPriceBidOrder__refundAmount
  highestPriceBidOrder__finalTxHash
  lowestPriceBidOrder
  lowestPriceBidOrder__id
  lowestPriceBidOrder__sellAmount
  lowestPriceBidOrder__buyAmount
  lowestPriceBidOrder__price
  lowestPriceBidOrder__volume
  lowestPriceBidOrder__timestamp
  lowestPriceBidOrder__auctionId
  lowestPriceBidOrder__userWalletAddress
  lowestPriceBidOrder__status
  lowestPriceBidOrder__txHash
  lowestPriceBidOrder__isExactOrder
  lowestPriceBidOrder__encodedOrderId
  lowestPriceBidOrder__lastUpdatedIndex
  lowestPriceBidOrder__finalizedBuyAmount
  lowestPriceBidOrder__finalizedSellAmount
  lowestPriceBidOrder__refundAmount
  lowestPriceBidOrder__finalTxHash
  activeOrders
  auctioningToken
  auctioningToken__id
  auctioningToken__symbol
  auctioningToken__decimals
  biddingToken
  biddingToken__id
  biddingToken__symbol
  biddingToken__decimals
  auctionEndDate
  orderCancellationEndDate
  startingTimeStamp
  minimumBiddingAmountPerOrder
  minFundingThreshold
  minBuyAmount
  auctionSupply
  allowListManager
  allowListSigner
  currentVolume
  volumeClearingPriceOrder
  currentClearingOrderSellAmount
  currentClearingOrderBuyAmount
  currentClearingOrderUserId
  currentClearingPrice
  currentBiddingAmount
  currentSubjectTokenBidAmount
  isAtomicClosureAllowed
  isPrivateAuction
  interestScore
  uniqueBidders
  isCleared
  totalOrders
  activeOrderCount
  txHash
  blockInfo
  blockInfo__id
  blockInfo__hash
  blockInfo__blockNumber
  blockInfo__timestamp
  minimumPriceInMoxie
}

scalar BigDecimal

scalar BigInt

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

input BlockChangedFilter {
  number_gte: Int!
}

type BlockInfo {
  id: ID!
  hash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

input BlockInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hash: Bytes
  hash_not: Bytes
  hash_gt: Bytes
  hash_lt: Bytes
  hash_gte: Bytes
  hash_lte: Bytes
  hash_in: [Bytes!]
  hash_not_in: [Bytes!]
  hash_contains: Bytes
  hash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BlockInfo_filter]
  or: [BlockInfo_filter]
}

enum BlockInfo_orderBy {
  id
  hash
  blockNumber
  timestamp
}

scalar Bytes

type CancellationSellOrder {
  """txhash+-+logIndex"""
  id: ID!
  blockInfo: BlockInfo!
  auctionId: BigInt!
  userId: BigInt!
  buyAmount: BigInt!
  sellAmount: BigInt!
}

input CancellationSellOrder_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockInfo: String
  blockInfo_not: String
  blockInfo_gt: String
  blockInfo_lt: String
  blockInfo_gte: String
  blockInfo_lte: String
  blockInfo_in: [String!]
  blockInfo_not_in: [String!]
  blockInfo_contains: String
  blockInfo_contains_nocase: String
  blockInfo_not_contains: String
  blockInfo_not_contains_nocase: String
  blockInfo_starts_with: String
  blockInfo_starts_with_nocase: String
  blockInfo_not_starts_with: String
  blockInfo_not_starts_with_nocase: String
  blockInfo_ends_with: String
  blockInfo_ends_with_nocase: String
  blockInfo_not_ends_with: String
  blockInfo_not_ends_with_nocase: String
  blockInfo_: BlockInfo_filter
  auctionId: BigInt
  auctionId_not: BigInt
  auctionId_gt: BigInt
  auctionId_lt: BigInt
  auctionId_gte: BigInt
  auctionId_lte: BigInt
  auctionId_in: [BigInt!]
  auctionId_not_in: [BigInt!]
  userId: BigInt
  userId_not: BigInt
  userId_gt: BigInt
  userId_lt: BigInt
  userId_gte: BigInt
  userId_lte: BigInt
  userId_in: [BigInt!]
  userId_not_in: [BigInt!]
  buyAmount: BigInt
  buyAmount_not: BigInt
  buyAmount_gt: BigInt
  buyAmount_lt: BigInt
  buyAmount_gte: BigInt
  buyAmount_lte: BigInt
  buyAmount_in: [BigInt!]
  buyAmount_not_in: [BigInt!]
  sellAmount: BigInt
  sellAmount_not: BigInt
  sellAmount_gt: BigInt
  sellAmount_lt: BigInt
  sellAmount_gte: BigInt
  sellAmount_lte: BigInt
  sellAmount_in: [BigInt!]
  sellAmount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CancellationSellOrder_filter]
  or: [CancellationSellOrder_filter]
}

enum CancellationSellOrder_orderBy {
  id
  blockInfo
  blockInfo__id
  blockInfo__hash
  blockInfo__blockNumber
  blockInfo__timestamp
  auctionId
  userId
  buyAmount
  sellAmount
}

type ClaimedFromOrder {
  """txhash+-+logIndex"""
  id: ID!
  blockInfo: BlockInfo!
  auctionId: BigInt!
  userId: BigInt!
  buyAmount: BigInt!
  sellAmount: BigInt!
}

input ClaimedFromOrder_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockInfo: String
  blockInfo_not: String
  blockInfo_gt: String
  blockInfo_lt: String
  blockInfo_gte: String
  blockInfo_lte: String
  blockInfo_in: [String!]
  blockInfo_not_in: [String!]
  blockInfo_contains: String
  blockInfo_contains_nocase: String
  blockInfo_not_contains: String
  blockInfo_not_contains_nocase: String
  blockInfo_starts_with: String
  blockInfo_starts_with_nocase: String
  blockInfo_not_starts_with: String
  blockInfo_not_starts_with_nocase: String
  blockInfo_ends_with: String
  blockInfo_ends_with_nocase: String
  blockInfo_not_ends_with: String
  blockInfo_not_ends_with_nocase: String
  blockInfo_: BlockInfo_filter
  auctionId: BigInt
  auctionId_not: BigInt
  auctionId_gt: BigInt
  auctionId_lt: BigInt
  auctionId_gte: BigInt
  auctionId_lte: BigInt
  auctionId_in: [BigInt!]
  auctionId_not_in: [BigInt!]
  userId: BigInt
  userId_not: BigInt
  userId_gt: BigInt
  userId_lt: BigInt
  userId_gte: BigInt
  userId_lte: BigInt
  userId_in: [BigInt!]
  userId_not_in: [BigInt!]
  buyAmount: BigInt
  buyAmount_not: BigInt
  buyAmount_gt: BigInt
  buyAmount_lt: BigInt
  buyAmount_gte: BigInt
  buyAmount_lte: BigInt
  buyAmount_in: [BigInt!]
  buyAmount_not_in: [BigInt!]
  sellAmount: BigInt
  sellAmount_not: BigInt
  sellAmount_gt: BigInt
  sellAmount_lt: BigInt
  sellAmount_gte: BigInt
  sellAmount_lte: BigInt
  sellAmount_in: [BigInt!]
  sellAmount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ClaimedFromOrder_filter]
  or: [ClaimedFromOrder_filter]
}

enum ClaimedFromOrder_orderBy {
  id
  blockInfo
  blockInfo__id
  blockInfo__hash
  blockInfo__blockNumber
  blockInfo__timestamp
  auctionId
  userId
  buyAmount
  sellAmount
}

"""
8 bytes signed integer

"""
scalar Int8

type NewAuction {
  """txhash+-+logIndex"""
  id: ID!
  blockInfo: BlockInfo!
  auctionId: BigInt!
  auctioningToken: Bytes!
  biddingToken: Bytes!
  orderCancellationEndDate: BigInt!
  auctionEndDate: BigInt!
  userId: BigInt!
  auctionedSellAmount: BigInt!
  minBuyAmount: BigInt!
  minimumBiddingAmountPerOrder: BigInt!
  minFundingThreshold: BigInt!
  allowListContract: Bytes!
  allowListData: Bytes!
}

input NewAuction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockInfo: String
  blockInfo_not: String
  blockInfo_gt: String
  blockInfo_lt: String
  blockInfo_gte: String
  blockInfo_lte: String
  blockInfo_in: [String!]
  blockInfo_not_in: [String!]
  blockInfo_contains: String
  blockInfo_contains_nocase: String
  blockInfo_not_contains: String
  blockInfo_not_contains_nocase: String
  blockInfo_starts_with: String
  blockInfo_starts_with_nocase: String
  blockInfo_not_starts_with: String
  blockInfo_not_starts_with_nocase: String
  blockInfo_ends_with: String
  blockInfo_ends_with_nocase: String
  blockInfo_not_ends_with: String
  blockInfo_not_ends_with_nocase: String
  blockInfo_: BlockInfo_filter
  auctionId: BigInt
  auctionId_not: BigInt
  auctionId_gt: BigInt
  auctionId_lt: BigInt
  auctionId_gte: BigInt
  auctionId_lte: BigInt
  auctionId_in: [BigInt!]
  auctionId_not_in: [BigInt!]
  auctioningToken: Bytes
  auctioningToken_not: Bytes
  auctioningToken_gt: Bytes
  auctioningToken_lt: Bytes
  auctioningToken_gte: Bytes
  auctioningToken_lte: Bytes
  auctioningToken_in: [Bytes!]
  auctioningToken_not_in: [Bytes!]
  auctioningToken_contains: Bytes
  auctioningToken_not_contains: Bytes
  biddingToken: Bytes
  biddingToken_not: Bytes
  biddingToken_gt: Bytes
  biddingToken_lt: Bytes
  biddingToken_gte: Bytes
  biddingToken_lte: Bytes
  biddingToken_in: [Bytes!]
  biddingToken_not_in: [Bytes!]
  biddingToken_contains: Bytes
  biddingToken_not_contains: Bytes
  orderCancellationEndDate: BigInt
  orderCancellationEndDate_not: BigInt
  orderCancellationEndDate_gt: BigInt
  orderCancellationEndDate_lt: BigInt
  orderCancellationEndDate_gte: BigInt
  orderCancellationEndDate_lte: BigInt
  orderCancellationEndDate_in: [BigInt!]
  orderCancellationEndDate_not_in: [BigInt!]
  auctionEndDate: BigInt
  auctionEndDate_not: BigInt
  auctionEndDate_gt: BigInt
  auctionEndDate_lt: BigInt
  auctionEndDate_gte: BigInt
  auctionEndDate_lte: BigInt
  auctionEndDate_in: [BigInt!]
  auctionEndDate_not_in: [BigInt!]
  userId: BigInt
  userId_not: BigInt
  userId_gt: BigInt
  userId_lt: BigInt
  userId_gte: BigInt
  userId_lte: BigInt
  userId_in: [BigInt!]
  userId_not_in: [BigInt!]
  auctionedSellAmount: BigInt
  auctionedSellAmount_not: BigInt
  auctionedSellAmount_gt: BigInt
  auctionedSellAmount_lt: BigInt
  auctionedSellAmount_gte: BigInt
  auctionedSellAmount_lte: BigInt
  auctionedSellAmount_in: [BigInt!]
  auctionedSellAmount_not_in: [BigInt!]
  minBuyAmount: BigInt
  minBuyAmount_not: BigInt
  minBuyAmount_gt: BigInt
  minBuyAmount_lt: BigInt
  minBuyAmount_gte: BigInt
  minBuyAmount_lte: BigInt
  minBuyAmount_in: [BigInt!]
  minBuyAmount_not_in: [BigInt!]
  minimumBiddingAmountPerOrder: BigInt
  minimumBiddingAmountPerOrder_not: BigInt
  minimumBiddingAmountPerOrder_gt: BigInt
  minimumBiddingAmountPerOrder_lt: BigInt
  minimumBiddingAmountPerOrder_gte: BigInt
  minimumBiddingAmountPerOrder_lte: BigInt
  minimumBiddingAmountPerOrder_in: [BigInt!]
  minimumBiddingAmountPerOrder_not_in: [BigInt!]
  minFundingThreshold: BigInt
  minFundingThreshold_not: BigInt
  minFundingThreshold_gt: BigInt
  minFundingThreshold_lt: BigInt
  minFundingThreshold_gte: BigInt
  minFundingThreshold_lte: BigInt
  minFundingThreshold_in: [BigInt!]
  minFundingThreshold_not_in: [BigInt!]
  allowListContract: Bytes
  allowListContract_not: Bytes
  allowListContract_gt: Bytes
  allowListContract_lt: Bytes
  allowListContract_gte: Bytes
  allowListContract_lte: Bytes
  allowListContract_in: [Bytes!]
  allowListContract_not_in: [Bytes!]
  allowListContract_contains: Bytes
  allowListContract_not_contains: Bytes
  allowListData: Bytes
  allowListData_not: Bytes
  allowListData_gt: Bytes
  allowListData_lt: Bytes
  allowListData_gte: Bytes
  allowListData_lte: Bytes
  allowListData_in: [Bytes!]
  allowListData_not_in: [Bytes!]
  allowListData_contains: Bytes
  allowListData_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NewAuction_filter]
  or: [NewAuction_filter]
}

enum NewAuction_orderBy {
  id
  blockInfo
  blockInfo__id
  blockInfo__hash
  blockInfo__blockNumber
  blockInfo__timestamp
  auctionId
  auctioningToken
  biddingToken
  orderCancellationEndDate
  auctionEndDate
  userId
  auctionedSellAmount
  minBuyAmount
  minimumBiddingAmountPerOrder
  minFundingThreshold
  allowListContract
  allowListData
}

type NewSellOrder {
  """txhash+-+logIndex"""
  id: ID!
  blockInfo: BlockInfo!
  auctionId: BigInt!
  userId: BigInt!
  buyAmount: BigInt!
  sellAmount: BigInt!
}

input NewSellOrder_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockInfo: String
  blockInfo_not: String
  blockInfo_gt: String
  blockInfo_lt: String
  blockInfo_gte: String
  blockInfo_lte: String
  blockInfo_in: [String!]
  blockInfo_not_in: [String!]
  blockInfo_contains: String
  blockInfo_contains_nocase: String
  blockInfo_not_contains: String
  blockInfo_not_contains_nocase: String
  blockInfo_starts_with: String
  blockInfo_starts_with_nocase: String
  blockInfo_not_starts_with: String
  blockInfo_not_starts_with_nocase: String
  blockInfo_ends_with: String
  blockInfo_ends_with_nocase: String
  blockInfo_not_ends_with: String
  blockInfo_not_ends_with_nocase: String
  blockInfo_: BlockInfo_filter
  auctionId: BigInt
  auctionId_not: BigInt
  auctionId_gt: BigInt
  auctionId_lt: BigInt
  auctionId_gte: BigInt
  auctionId_lte: BigInt
  auctionId_in: [BigInt!]
  auctionId_not_in: [BigInt!]
  userId: BigInt
  userId_not: BigInt
  userId_gt: BigInt
  userId_lt: BigInt
  userId_gte: BigInt
  userId_lte: BigInt
  userId_in: [BigInt!]
  userId_not_in: [BigInt!]
  buyAmount: BigInt
  buyAmount_not: BigInt
  buyAmount_gt: BigInt
  buyAmount_lt: BigInt
  buyAmount_gte: BigInt
  buyAmount_lte: BigInt
  buyAmount_in: [BigInt!]
  buyAmount_not_in: [BigInt!]
  sellAmount: BigInt
  sellAmount_not: BigInt
  sellAmount_gt: BigInt
  sellAmount_lt: BigInt
  sellAmount_gte: BigInt
  sellAmount_lte: BigInt
  sellAmount_in: [BigInt!]
  sellAmount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NewSellOrder_filter]
  or: [NewSellOrder_filter]
}

enum NewSellOrder_orderBy {
  id
  blockInfo
  blockInfo__id
  blockInfo__hash
  blockInfo__blockNumber
  blockInfo__timestamp
  auctionId
  userId
  buyAmount
  sellAmount
}

type NewUser {
  """txhash+-+logIndex"""
  id: ID!
  blockInfo: BlockInfo!
  userId: BigInt!
  userAddress: Bytes!
}

input NewUser_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockInfo: String
  blockInfo_not: String
  blockInfo_gt: String
  blockInfo_lt: String
  blockInfo_gte: String
  blockInfo_lte: String
  blockInfo_in: [String!]
  blockInfo_not_in: [String!]
  blockInfo_contains: String
  blockInfo_contains_nocase: String
  blockInfo_not_contains: String
  blockInfo_not_contains_nocase: String
  blockInfo_starts_with: String
  blockInfo_starts_with_nocase: String
  blockInfo_not_starts_with: String
  blockInfo_not_starts_with_nocase: String
  blockInfo_ends_with: String
  blockInfo_ends_with_nocase: String
  blockInfo_not_ends_with: String
  blockInfo_not_ends_with_nocase: String
  blockInfo_: BlockInfo_filter
  userId: BigInt
  userId_not: BigInt
  userId_gt: BigInt
  userId_lt: BigInt
  userId_gte: BigInt
  userId_lte: BigInt
  userId_in: [BigInt!]
  userId_not_in: [BigInt!]
  userAddress: Bytes
  userAddress_not: Bytes
  userAddress_gt: Bytes
  userAddress_lt: Bytes
  userAddress_gte: Bytes
  userAddress_lte: Bytes
  userAddress_in: [Bytes!]
  userAddress_not_in: [Bytes!]
  userAddress_contains: Bytes
  userAddress_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NewUser_filter]
  or: [NewUser_filter]
}

enum NewUser_orderBy {
  id
  blockInfo
  blockInfo__id
  blockInfo__hash
  blockInfo__blockNumber
  blockInfo__timestamp
  userId
  userAddress
}

type Order {
  id: ID!
  sellAmount: BigInt!
  buyAmount: BigInt!

  """sellAmount / buyAmount"""
  price: BigDecimal!

  """sellAmount * 10 ^ -decimalsSellToken"""
  volume: BigDecimal!

  """timestamp of the order"""
  timestamp: BigInt!
  auctionId: BigInt!
  auction: AuctionDetail
  user: User!

  """added to easiness on querying user's orders by address"""
  userWalletAddress: Bytes!
  status: Status!

  """transaction hash of the order"""
  txHash: Bytes!

  """block information of the order transaction"""
  blockInfo: BlockInfo!

  """order transactions"""
  orderTxns(skip: Int = 0, first: Int = 100, orderBy: OrderTxn_orderBy, orderDirection: OrderDirection, where: OrderTxn_filter): [OrderTxn!]!

  """exactOrder gets created when auction is created"""
  isExactOrder: Boolean!

  """encoded orderId representing userId,buyAmount,sellAmount"""
  encodedOrderId: String!
  lastUpdatedIndex: BigInt!

  """amount of buyAmount claimed after auction is claimed"""
  finalizedBuyAmount: BigInt!

  """amount of sellAmount actually used in auction"""
  finalizedSellAmount: BigInt!

  """amount of sellAmount returned back after auction is claimed"""
  refundAmount: BigInt!

  """transaction hash of auction claimed not cancelled"""
  finalTxHash: Bytes
}

input Order_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sellAmount: BigInt
  sellAmount_not: BigInt
  sellAmount_gt: BigInt
  sellAmount_lt: BigInt
  sellAmount_gte: BigInt
  sellAmount_lte: BigInt
  sellAmount_in: [BigInt!]
  sellAmount_not_in: [BigInt!]
  buyAmount: BigInt
  buyAmount_not: BigInt
  buyAmount_gt: BigInt
  buyAmount_lt: BigInt
  buyAmount_gte: BigInt
  buyAmount_lte: BigInt
  buyAmount_in: [BigInt!]
  buyAmount_not_in: [BigInt!]
  price: BigDecimal
  price_not: BigDecimal
  price_gt: BigDecimal
  price_lt: BigDecimal
  price_gte: BigDecimal
  price_lte: BigDecimal
  price_in: [BigDecimal!]
  price_not_in: [BigDecimal!]
  volume: BigDecimal
  volume_not: BigDecimal
  volume_gt: BigDecimal
  volume_lt: BigDecimal
  volume_gte: BigDecimal
  volume_lte: BigDecimal
  volume_in: [BigDecimal!]
  volume_not_in: [BigDecimal!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  auctionId: BigInt
  auctionId_not: BigInt
  auctionId_gt: BigInt
  auctionId_lt: BigInt
  auctionId_gte: BigInt
  auctionId_lte: BigInt
  auctionId_in: [BigInt!]
  auctionId_not_in: [BigInt!]
  auction: String
  auction_not: String
  auction_gt: String
  auction_lt: String
  auction_gte: String
  auction_lte: String
  auction_in: [String!]
  auction_not_in: [String!]
  auction_contains: String
  auction_contains_nocase: String
  auction_not_contains: String
  auction_not_contains_nocase: String
  auction_starts_with: String
  auction_starts_with_nocase: String
  auction_not_starts_with: String
  auction_not_starts_with_nocase: String
  auction_ends_with: String
  auction_ends_with_nocase: String
  auction_not_ends_with: String
  auction_not_ends_with_nocase: String
  auction_: AuctionDetail_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  userWalletAddress: Bytes
  userWalletAddress_not: Bytes
  userWalletAddress_gt: Bytes
  userWalletAddress_lt: Bytes
  userWalletAddress_gte: Bytes
  userWalletAddress_lte: Bytes
  userWalletAddress_in: [Bytes!]
  userWalletAddress_not_in: [Bytes!]
  userWalletAddress_contains: Bytes
  userWalletAddress_not_contains: Bytes
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockInfo: String
  blockInfo_not: String
  blockInfo_gt: String
  blockInfo_lt: String
  blockInfo_gte: String
  blockInfo_lte: String
  blockInfo_in: [String!]
  blockInfo_not_in: [String!]
  blockInfo_contains: String
  blockInfo_contains_nocase: String
  blockInfo_not_contains: String
  blockInfo_not_contains_nocase: String
  blockInfo_starts_with: String
  blockInfo_starts_with_nocase: String
  blockInfo_not_starts_with: String
  blockInfo_not_starts_with_nocase: String
  blockInfo_ends_with: String
  blockInfo_ends_with_nocase: String
  blockInfo_not_ends_with: String
  blockInfo_not_ends_with_nocase: String
  blockInfo_: BlockInfo_filter
  orderTxns_: OrderTxn_filter
  isExactOrder: Boolean
  isExactOrder_not: Boolean
  isExactOrder_in: [Boolean!]
  isExactOrder_not_in: [Boolean!]
  encodedOrderId: String
  encodedOrderId_not: String
  encodedOrderId_gt: String
  encodedOrderId_lt: String
  encodedOrderId_gte: String
  encodedOrderId_lte: String
  encodedOrderId_in: [String!]
  encodedOrderId_not_in: [String!]
  encodedOrderId_contains: String
  encodedOrderId_contains_nocase: String
  encodedOrderId_not_contains: String
  encodedOrderId_not_contains_nocase: String
  encodedOrderId_starts_with: String
  encodedOrderId_starts_with_nocase: String
  encodedOrderId_not_starts_with: String
  encodedOrderId_not_starts_with_nocase: String
  encodedOrderId_ends_with: String
  encodedOrderId_ends_with_nocase: String
  encodedOrderId_not_ends_with: String
  encodedOrderId_not_ends_with_nocase: String
  lastUpdatedIndex: BigInt
  lastUpdatedIndex_not: BigInt
  lastUpdatedIndex_gt: BigInt
  lastUpdatedIndex_lt: BigInt
  lastUpdatedIndex_gte: BigInt
  lastUpdatedIndex_lte: BigInt
  lastUpdatedIndex_in: [BigInt!]
  lastUpdatedIndex_not_in: [BigInt!]
  finalizedBuyAmount: BigInt
  finalizedBuyAmount_not: BigInt
  finalizedBuyAmount_gt: BigInt
  finalizedBuyAmount_lt: BigInt
  finalizedBuyAmount_gte: BigInt
  finalizedBuyAmount_lte: BigInt
  finalizedBuyAmount_in: [BigInt!]
  finalizedBuyAmount_not_in: [BigInt!]
  finalizedSellAmount: BigInt
  finalizedSellAmount_not: BigInt
  finalizedSellAmount_gt: BigInt
  finalizedSellAmount_lt: BigInt
  finalizedSellAmount_gte: BigInt
  finalizedSellAmount_lte: BigInt
  finalizedSellAmount_in: [BigInt!]
  finalizedSellAmount_not_in: [BigInt!]
  refundAmount: BigInt
  refundAmount_not: BigInt
  refundAmount_gt: BigInt
  refundAmount_lt: BigInt
  refundAmount_gte: BigInt
  refundAmount_lte: BigInt
  refundAmount_in: [BigInt!]
  refundAmount_not_in: [BigInt!]
  finalTxHash: Bytes
  finalTxHash_not: Bytes
  finalTxHash_gt: Bytes
  finalTxHash_lt: Bytes
  finalTxHash_gte: Bytes
  finalTxHash_lte: Bytes
  finalTxHash_in: [Bytes!]
  finalTxHash_not_in: [Bytes!]
  finalTxHash_contains: Bytes
  finalTxHash_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Order_filter]
  or: [Order_filter]
}

enum Order_orderBy {
  id
  sellAmount
  buyAmount
  price
  volume
  timestamp
  auctionId
  auction
  auction__id
  auction__auctionId
  auction__auctionEndDate
  auction__orderCancellationEndDate
  auction__startingTimeStamp
  auction__minimumBiddingAmountPerOrder
  auction__minFundingThreshold
  auction__minBuyAmount
  auction__auctionSupply
  auction__allowListManager
  auction__allowListSigner
  auction__currentVolume
  auction__volumeClearingPriceOrder
  auction__currentClearingOrderSellAmount
  auction__currentClearingOrderBuyAmount
  auction__currentClearingOrderUserId
  auction__currentClearingPrice
  auction__currentBiddingAmount
  auction__currentSubjectTokenBidAmount
  auction__isAtomicClosureAllowed
  auction__isPrivateAuction
  auction__interestScore
  auction__uniqueBidders
  auction__isCleared
  auction__totalOrders
  auction__activeOrderCount
  auction__txHash
  auction__minimumPriceInMoxie
  user
  user__id
  user__address
  userWalletAddress
  status
  txHash
  blockInfo
  blockInfo__id
  blockInfo__hash
  blockInfo__blockNumber
  blockInfo__timestamp
  orderTxns
  isExactOrder
  encodedOrderId
  lastUpdatedIndex
  finalizedBuyAmount
  finalizedSellAmount
  refundAmount
  finalTxHash
}

type OrderCounter {
  id: ID!
  counter: BigInt!
}

input OrderCounter_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  counter: BigInt
  counter_not: BigInt
  counter_gt: BigInt
  counter_lt: BigInt
  counter_gte: BigInt
  counter_lte: BigInt
  counter_in: [BigInt!]
  counter_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [OrderCounter_filter]
  or: [OrderCounter_filter]
}

enum OrderCounter_orderBy {
  id
  counter
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type OrderTxn {
  """txhash+-+logIndex"""
  id: ID!
  txHash: Bytes!
  blockInfo: BlockInfo!
  order: Order!
  newStatus: Status!
}

input OrderTxn_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockInfo: String
  blockInfo_not: String
  blockInfo_gt: String
  blockInfo_lt: String
  blockInfo_gte: String
  blockInfo_lte: String
  blockInfo_in: [String!]
  blockInfo_not_in: [String!]
  blockInfo_contains: String
  blockInfo_contains_nocase: String
  blockInfo_not_contains: String
  blockInfo_not_contains_nocase: String
  blockInfo_starts_with: String
  blockInfo_starts_with_nocase: String
  blockInfo_not_starts_with: String
  blockInfo_not_starts_with_nocase: String
  blockInfo_ends_with: String
  blockInfo_ends_with_nocase: String
  blockInfo_not_ends_with: String
  blockInfo_not_ends_with_nocase: String
  blockInfo_: BlockInfo_filter
  order: String
  order_not: String
  order_gt: String
  order_lt: String
  order_gte: String
  order_lte: String
  order_in: [String!]
  order_not_in: [String!]
  order_contains: String
  order_contains_nocase: String
  order_not_contains: String
  order_not_contains_nocase: String
  order_starts_with: String
  order_starts_with_nocase: String
  order_not_starts_with: String
  order_not_starts_with_nocase: String
  order_ends_with: String
  order_ends_with_nocase: String
  order_not_ends_with: String
  order_not_ends_with_nocase: String
  order_: Order_filter
  newStatus: Status
  newStatus_not: Status
  newStatus_in: [Status!]
  newStatus_not_in: [Status!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [OrderTxn_filter]
  or: [OrderTxn_filter]
}

enum OrderTxn_orderBy {
  id
  txHash
  blockInfo
  blockInfo__id
  blockInfo__hash
  blockInfo__blockNumber
  blockInfo__timestamp
  order
  order__id
  order__sellAmount
  order__buyAmount
  order__price
  order__volume
  order__timestamp
  order__auctionId
  order__userWalletAddress
  order__status
  order__txHash
  order__isExactOrder
  order__encodedOrderId
  order__lastUpdatedIndex
  order__finalizedBuyAmount
  order__finalizedSellAmount
  order__refundAmount
  order__finalTxHash
  newStatus
}

type OwnershipTransferred {
  """txhash+-+logIndex"""
  id: ID!
  blockInfo: BlockInfo!
  previousOwner: Bytes!
  newOwner: Bytes!
}

input OwnershipTransferred_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockInfo: String
  blockInfo_not: String
  blockInfo_gt: String
  blockInfo_lt: String
  blockInfo_gte: String
  blockInfo_lte: String
  blockInfo_in: [String!]
  blockInfo_not_in: [String!]
  blockInfo_contains: String
  blockInfo_contains_nocase: String
  blockInfo_not_contains: String
  blockInfo_not_contains_nocase: String
  blockInfo_starts_with: String
  blockInfo_starts_with_nocase: String
  blockInfo_not_starts_with: String
  blockInfo_not_starts_with_nocase: String
  blockInfo_ends_with: String
  blockInfo_ends_with_nocase: String
  blockInfo_not_ends_with: String
  blockInfo_not_ends_with_nocase: String
  blockInfo_: BlockInfo_filter
  previousOwner: Bytes
  previousOwner_not: Bytes
  previousOwner_gt: Bytes
  previousOwner_lt: Bytes
  previousOwner_gte: Bytes
  previousOwner_lte: Bytes
  previousOwner_in: [Bytes!]
  previousOwner_not_in: [Bytes!]
  previousOwner_contains: Bytes
  previousOwner_not_contains: Bytes
  newOwner: Bytes
  newOwner_not: Bytes
  newOwner_gt: Bytes
  newOwner_lt: Bytes
  newOwner_gte: Bytes
  newOwner_lte: Bytes
  newOwner_in: [Bytes!]
  newOwner_not_in: [Bytes!]
  newOwner_contains: Bytes
  newOwner_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [OwnershipTransferred_filter]
  or: [OwnershipTransferred_filter]
}

enum OwnershipTransferred_orderBy {
  id
  blockInfo
  blockInfo__id
  blockInfo__hash
  blockInfo__blockNumber
  blockInfo__timestamp
  previousOwner
  newOwner
}

type Query {
  blockInfo(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BlockInfo
  blockInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: BlockInfo_orderBy
    orderDirection: OrderDirection
    where: BlockInfo_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BlockInfo!]!
  summary(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Summary
  summaries(
    skip: Int = 0
    first: Int = 100
    orderBy: Summary_orderBy
    orderDirection: OrderDirection
    where: Summary_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Summary!]!
  order(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Order
  orders(
    skip: Int = 0
    first: Int = 100
    orderBy: Order_orderBy
    orderDirection: OrderDirection
    where: Order_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Order!]!
  orderTxn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrderTxn
  orderTxns(
    skip: Int = 0
    first: Int = 100
    orderBy: OrderTxn_orderBy
    orderDirection: OrderDirection
    where: OrderTxn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OrderTxn!]!
  user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  auctionDetail(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AuctionDetail
  auctionDetails(
    skip: Int = 0
    first: Int = 100
    orderBy: AuctionDetail_orderBy
    orderDirection: OrderDirection
    where: AuctionDetail_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AuctionDetail!]!
  token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  auctionCleared(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AuctionCleared
  auctionCleareds(
    skip: Int = 0
    first: Int = 100
    orderBy: AuctionCleared_orderBy
    orderDirection: OrderDirection
    where: AuctionCleared_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AuctionCleared!]!
  cancellationSellOrder(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CancellationSellOrder
  cancellationSellOrders(
    skip: Int = 0
    first: Int = 100
    orderBy: CancellationSellOrder_orderBy
    orderDirection: OrderDirection
    where: CancellationSellOrder_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CancellationSellOrder!]!
  claimedFromOrder(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimedFromOrder
  claimedFromOrders(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimedFromOrder_orderBy
    orderDirection: OrderDirection
    where: ClaimedFromOrder_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClaimedFromOrder!]!
  newAuction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NewAuction
  newAuctions(
    skip: Int = 0
    first: Int = 100
    orderBy: NewAuction_orderBy
    orderDirection: OrderDirection
    where: NewAuction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NewAuction!]!
  newSellOrder(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NewSellOrder
  newSellOrders(
    skip: Int = 0
    first: Int = 100
    orderBy: NewSellOrder_orderBy
    orderDirection: OrderDirection
    where: NewSellOrder_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NewSellOrder!]!
  newUser(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NewUser
  newUsers(
    skip: Int = 0
    first: Int = 100
    orderBy: NewUser_orderBy
    orderDirection: OrderDirection
    where: NewUser_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NewUser!]!
  ownershipTransferred(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OwnershipTransferred
  ownershipTransferreds(
    skip: Int = 0
    first: Int = 100
    orderBy: OwnershipTransferred_orderBy
    orderDirection: OrderDirection
    where: OwnershipTransferred_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OwnershipTransferred!]!
  userRegistration(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserRegistration
  userRegistrations(
    skip: Int = 0
    first: Int = 100
    orderBy: UserRegistration_orderBy
    orderDirection: OrderDirection
    where: UserRegistration_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserRegistration!]!
  orderCounter(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrderCounter
  orderCounters(
    skip: Int = 0
    first: Int = 100
    orderBy: OrderCounter_orderBy
    orderDirection: OrderDirection
    where: OrderCounter_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OrderCounter!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

enum Status {
  Placed
  Claimed
  Cancelled
}

type Subscription {
  blockInfo(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BlockInfo
  blockInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: BlockInfo_orderBy
    orderDirection: OrderDirection
    where: BlockInfo_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BlockInfo!]!
  summary(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Summary
  summaries(
    skip: Int = 0
    first: Int = 100
    orderBy: Summary_orderBy
    orderDirection: OrderDirection
    where: Summary_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Summary!]!
  order(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Order
  orders(
    skip: Int = 0
    first: Int = 100
    orderBy: Order_orderBy
    orderDirection: OrderDirection
    where: Order_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Order!]!
  orderTxn(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrderTxn
  orderTxns(
    skip: Int = 0
    first: Int = 100
    orderBy: OrderTxn_orderBy
    orderDirection: OrderDirection
    where: OrderTxn_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OrderTxn!]!
  user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  auctionDetail(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AuctionDetail
  auctionDetails(
    skip: Int = 0
    first: Int = 100
    orderBy: AuctionDetail_orderBy
    orderDirection: OrderDirection
    where: AuctionDetail_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AuctionDetail!]!
  token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  auctionCleared(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AuctionCleared
  auctionCleareds(
    skip: Int = 0
    first: Int = 100
    orderBy: AuctionCleared_orderBy
    orderDirection: OrderDirection
    where: AuctionCleared_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AuctionCleared!]!
  cancellationSellOrder(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CancellationSellOrder
  cancellationSellOrders(
    skip: Int = 0
    first: Int = 100
    orderBy: CancellationSellOrder_orderBy
    orderDirection: OrderDirection
    where: CancellationSellOrder_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CancellationSellOrder!]!
  claimedFromOrder(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimedFromOrder
  claimedFromOrders(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimedFromOrder_orderBy
    orderDirection: OrderDirection
    where: ClaimedFromOrder_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClaimedFromOrder!]!
  newAuction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NewAuction
  newAuctions(
    skip: Int = 0
    first: Int = 100
    orderBy: NewAuction_orderBy
    orderDirection: OrderDirection
    where: NewAuction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NewAuction!]!
  newSellOrder(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NewSellOrder
  newSellOrders(
    skip: Int = 0
    first: Int = 100
    orderBy: NewSellOrder_orderBy
    orderDirection: OrderDirection
    where: NewSellOrder_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NewSellOrder!]!
  newUser(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NewUser
  newUsers(
    skip: Int = 0
    first: Int = 100
    orderBy: NewUser_orderBy
    orderDirection: OrderDirection
    where: NewUser_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NewUser!]!
  ownershipTransferred(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OwnershipTransferred
  ownershipTransferreds(
    skip: Int = 0
    first: Int = 100
    orderBy: OwnershipTransferred_orderBy
    orderDirection: OrderDirection
    where: OwnershipTransferred_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OwnershipTransferred!]!
  userRegistration(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserRegistration
  userRegistrations(
    skip: Int = 0
    first: Int = 100
    orderBy: UserRegistration_orderBy
    orderDirection: OrderDirection
    where: UserRegistration_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserRegistration!]!
  orderCounter(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrderCounter
  orderCounters(
    skip: Int = 0
    first: Int = 100
    orderBy: OrderCounter_orderBy
    orderDirection: OrderDirection
    where: OrderCounter_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OrderCounter!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Summary {
  """hardcoded id: SUMMARY"""
  id: ID!

  """total bidding value (combining all orders) in the system"""
  totalBiddingValue: BigInt!

  """total orders in the system"""
  totalOrders: BigInt!

  """total auctions in the system"""
  totalAuctions: BigInt!
}

input Summary_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalBiddingValue: BigInt
  totalBiddingValue_not: BigInt
  totalBiddingValue_gt: BigInt
  totalBiddingValue_lt: BigInt
  totalBiddingValue_gte: BigInt
  totalBiddingValue_lte: BigInt
  totalBiddingValue_in: [BigInt!]
  totalBiddingValue_not_in: [BigInt!]
  totalOrders: BigInt
  totalOrders_not: BigInt
  totalOrders_gt: BigInt
  totalOrders_lt: BigInt
  totalOrders_gte: BigInt
  totalOrders_lte: BigInt
  totalOrders_in: [BigInt!]
  totalOrders_not_in: [BigInt!]
  totalAuctions: BigInt
  totalAuctions_not: BigInt
  totalAuctions_gt: BigInt
  totalAuctions_lt: BigInt
  totalAuctions_gte: BigInt
  totalAuctions_lte: BigInt
  totalAuctions_in: [BigInt!]
  totalAuctions_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Summary_filter]
  or: [Summary_filter]
}

enum Summary_orderBy {
  id
  totalBiddingValue
  totalOrders
  totalAuctions
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type Token {
  id: ID!
  symbol: String!
  decimals: BigInt!
  auctionsAsAuctioningToken(skip: Int = 0, first: Int = 100, orderBy: AuctionDetail_orderBy, orderDirection: OrderDirection, where: AuctionDetail_filter): [AuctionDetail!]!
  auctionsAsBiddingToken(skip: Int = 0, first: Int = 100, orderBy: AuctionDetail_orderBy, orderDirection: OrderDirection, where: AuctionDetail_filter): [AuctionDetail!]!
}

input Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  auctionsAsAuctioningToken_: AuctionDetail_filter
  auctionsAsBiddingToken_: AuctionDetail_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  or: [Token_filter]
}

enum Token_orderBy {
  id
  symbol
  decimals
  auctionsAsAuctioningToken
  auctionsAsBiddingToken
}

type User {
  id: ID!
  address: Bytes!
  createdAuctions(skip: Int = 0, first: Int = 100, orderBy: AuctionDetail_orderBy, orderDirection: OrderDirection, where: AuctionDetail_filter): [AuctionDetail!]!
  participatedAuctions(skip: Int = 0, first: Int = 100, orderBy: AuctionDetail_orderBy, orderDirection: OrderDirection, where: AuctionDetail_filter): [AuctionDetail!]!
  orders(skip: Int = 0, first: Int = 100, orderBy: Order_orderBy, orderDirection: OrderDirection, where: Order_filter): [Order!]!
}

input User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  createdAuctions: [String!]
  createdAuctions_not: [String!]
  createdAuctions_contains: [String!]
  createdAuctions_contains_nocase: [String!]
  createdAuctions_not_contains: [String!]
  createdAuctions_not_contains_nocase: [String!]
  createdAuctions_: AuctionDetail_filter
  participatedAuctions: [String!]
  participatedAuctions_not: [String!]
  participatedAuctions_contains: [String!]
  participatedAuctions_contains_nocase: [String!]
  participatedAuctions_not_contains: [String!]
  participatedAuctions_not_contains_nocase: [String!]
  participatedAuctions_: AuctionDetail_filter
  orders_: Order_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [User_filter]
  or: [User_filter]
}

enum User_orderBy {
  id
  address
  createdAuctions
  participatedAuctions
  orders
}

type UserRegistration {
  """txhash+-+logIndex"""
  id: ID!
  blockInfo: BlockInfo!
  user: Bytes!
  userId: BigInt!
}

input UserRegistration_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockInfo: String
  blockInfo_not: String
  blockInfo_gt: String
  blockInfo_lt: String
  blockInfo_gte: String
  blockInfo_lte: String
  blockInfo_in: [String!]
  blockInfo_not_in: [String!]
  blockInfo_contains: String
  blockInfo_contains_nocase: String
  blockInfo_not_contains: String
  blockInfo_not_contains_nocase: String
  blockInfo_starts_with: String
  blockInfo_starts_with_nocase: String
  blockInfo_not_starts_with: String
  blockInfo_not_starts_with_nocase: String
  blockInfo_ends_with: String
  blockInfo_ends_with_nocase: String
  blockInfo_not_ends_with: String
  blockInfo_not_ends_with_nocase: String
  blockInfo_: BlockInfo_filter
  user: Bytes
  user_not: Bytes
  user_gt: Bytes
  user_lt: Bytes
  user_gte: Bytes
  user_lte: Bytes
  user_in: [Bytes!]
  user_not_in: [Bytes!]
  user_contains: Bytes
  user_not_contains: Bytes
  userId: BigInt
  userId_not: BigInt
  userId_gt: BigInt
  userId_lt: BigInt
  userId_gte: BigInt
  userId_lte: BigInt
  userId_in: [BigInt!]
  userId_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UserRegistration_filter]
  or: [UserRegistration_filter]
}

enum UserRegistration_orderBy {
  id
  blockInfo
  blockInfo__id
  blockInfo__hash
  blockInfo__blockNumber
  blockInfo__timestamp
  user
  userId
}

